{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","console","log","delete","Filter","filter","handleFilterChange","value","onChange","Notification","message","className","Person","person","deletePerson","name","number","onClick","PersonForm","props","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","completionMessage","setCompletionMessage","errorMessage","setErrorMessage","useEffect","PersonService","initPersons","personsToShow","length","toLowerCase","includes","event","target","preventDefault","personObject","some","window","confirm","personToChange","find","newPersonObject","newPersons","returnedPerson","concat","setTimeout","catch","error","map","deletePersonNum","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5476eabf.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst deleteThePerson = (id) => {\n    console.log('Delete person number', id)\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, deleteThePerson }","import React, { useState, useEffect } from 'react'\nimport PersonService from './services/persons'\n\nconst Filter = ({ filter, handleFilterChange }) => {\n  return (\n    <div>\n      Filter with <input value = {filter} onChange = {handleFilterChange}Â />\n    </div>\n  )\n}\n\nconst Notification = ({ message, className }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={className}>\n      {message}\n    </div>\n  )\n}\n\nconst Person = ({ person, deletePerson }) => {\n\n  return (\n    <div> \n      {person.name}, {person.number} <button onClick={deletePerson}>Delete</button>\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n      <form onSubmit = {props.addPerson}>\n        <div>\n        name: <input value = {props.newName} onChange = {props.handleNameChange}/>\n      </div>\n      <div>\n        number: <input value = {props.newNumber} onChange = {props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n  </form>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ completionMessage, setCompletionMessage] = useState(null)\n  const [ errorMessage, setErrorMessage ] = useState(null)\n\n  useEffect(() => {\n    PersonService\n      .getAll()\n      .then(initPersons => {\n        setPersons(initPersons)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (!(persons.some((person) => person['name'] === newName))) {\n      PersonService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setCompletionMessage(\"Addition completed!\")\n          setTimeout(() => {\n            setCompletionMessage(null)\n          }, 3000)    \n        })\n        .catch(error => {\n          console.log(error.response.data)\n          setErrorMessage(\"Validation Error\")\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 3000)\n        })\n\n    } else {\n      if (window.confirm(\"Replace old number for this person?\")) {\n        const personToChange = persons.find(person => person.name === newName)\n        console.log(\"Person: \", personToChange)\n        const newPersonObject = {...personToChange, number: newNumber}\n        console.log(\"newPersonObject: \", newPersonObject)\n        const newPersons = persons.filter(person => person.id !== personToChange.id)\n        console.log(\"newPersons: \", newPersons)\n\n        PersonService\n          .update(personToChange.id, newPersonObject)\n          .then(returnedPerson => {\n            setPersons(newPersons.concat(newPersonObject))\n\n            setCompletionMessage(\"New number is saved!\")\n            setTimeout(() => {\n              setCompletionMessage(null)\n            }, 3000)\n          })\n          .catch(error => {\n            setErrorMessage(`${personToChange.name} is already removed from the server`)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 3000)\n          })\n  \n      }\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const deletePersonNum = (id) => {\n    if (window.confirm(\"Delete this number?\")) {\n      const newPersons = persons.filter(person => person.id !== id)\n\n      PersonService\n        .deleteThePerson(id)\n      \n      setPersons(newPersons)\n\n      setCompletionMessage(\"Number is deleted!\")\n      setTimeout(() => {\n        setCompletionMessage(null)\n      }, 3000)\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n\n  }\n\n  const personsToShow = (filter.length === 0)\n    ? persons\n    : persons.filter(person => person.name.toLowerCase().includes(filter))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} className='error'/>\n      <Notification message={completionMessage} className='notification'/>\n      <Filter filter = {filter} handleFilterChange = {handleFilterChange} />\n      <h2>Add new</h2>\n      <PersonForm addPerson = {addPerson} newName = {newName} newNumber = {newNumber} handleNameChange = {handleNameChange} handleNumberChange = {handleNumberChange}/>\n      <h2>Numbers</h2>\n      {personsToShow.map(person => \n        <Person person = {person} deletePerson = {() => deletePersonNum(person.id)} key = {person.name}/>)}\n    </div>\n  )\n\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n); "],"sourceRoot":""}